#include <iostream>
using namespace std;

class stackLL{                  //class stackLL
    class Node{                 //class Node
        // Node class
    public:
        int data;               //data
        Node *next;             //pointer to next node
        Node(int data){         //constructor to initialize data
            this->data = data;
            this->next = nullptr;
        }
    };
    Node *top;              //pointer to top of stack
public:
    stackLL(){              //constructor to initialize top
        top = nullptr;
    }
    ~stackLL(){             //destructor to delete stack
        Node *temp = top;
        while(temp != nullptr){    //while stack is not empty
            Node *temp2 = temp;     //temp2 points to temp
            temp = temp->next;      //temp points to next node
            delete temp2;           //delete temp2
        }
    }
    bool empty(){                   //function to check if stack is empty
        return top == nullptr;         //return true if top is nullptr
    }                               //else return false

    void push(int data){            //function to push data into stack
        // Push data into stack
        Node *newNode = new Node(data);    //create new node with data
        if(top == nullptr){                    //if stack is empty
            top = newNode;                  //top points to newNode
        }
        else{
            newNode->next = top;        //newNode points to top
            top = newNode;              //top points to newNode
        }
    }

    int pop(){
        // Pop data from stack
        if(top == nullptr){        //if stack is empty
            return -1;          //return -1
        }
        else{
            Node *temp = top;    //temp points to top
            top = top->next;    //top points to next node
            int data = temp->data;  //data stores data of temp
            delete temp;        //delete temp
            return data;        //return data
        }
    }


    //add item x to stack, but insert it
    //right after the current ith item from the top
    //(and before the i+1 item).
    void insertAt(int x, int i){
        // Your code here
        Node *temp = top;           //temp points to top
        Node *newNode = new Node(x);    //create new node with data x
        if(i == 0){                 //if i is 0
            newNode->next = top;    //newNode points to top
            top = newNode;          //top points to newNode
        }
        else{                          //else
            for(int j = 0; j < i-1; j++){       //for loop to traverse to i-1th node
                temp = temp->next;          //temp points to next node
            }
            newNode->next = temp->next;    //newNode points to next node of temp
            temp->next = newNode;       //temp points to newNode
        }
    }

};